/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package anotherproject;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashSet;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class PacMan extends JPanel implements ActionListener, KeyListener{
    private int rowCount = 21;
    private int columnCount = 19;
    private int tileSize = 32;
    private int boardWidth = columnCount * tileSize;
    private int boardHeight = rowCount * tileSize;
    
    Images image = new Images();
    
    //X = wall, O = skip, P = pac man, ' ' = food
    //Ghosts: b = blue, o = orange, p = pink, r = red
    private String[] tileMap = {
        "XXXXXXXXXXXXXXXXXXX",
        "X        X        X",
        "X XX XXX X XXX XX X",
        "X                 X",
        "X XX X XXXXX X XX X",
        "X    X       X    X",
        "XXXX XXXX XXXX XXXX",
        "OOOX X       X XOOO",
        "XXXX X XXrXX X XXXX",
        "O       bpo       O",
        "XXXX X XXXXX X XXXX",
        "OOOX X       X XOOO",
        "XXXX X XXXXX X XXXX",
        "X        X        X",
        "X XX XXX X XXX XX X",
        "X  X     P     X  X",
        "XX X X XXXXX X X XX",
        "X    X   X   X    X",
        "X XXXXXX X XXXXXX X",
        "X                 X",
        "XXXXXXXXXXXXXXXXXXX" 
    };
    
    HashSet<Block> walls;
    HashSet<Block> foods;
    HashSet<Block> ghosts;
    Block pacman;
    
    Timer loop;
    char[] directions = {'U', 'D', 'L', 'R'};
    Random random = new Random();
    int score = 0;
    int lives = 3;
    boolean gameOver = false;
    
    PacMan(){
        setPreferredSize(new Dimension(boardWidth, boardHeight));
        setBackground(Color.BLACK);
        addKeyListener(this);
        setFocusable(true);
        
        image.setWall(new ImageIcon("C:\\Test1\\wall.png").getImage());
        image.setBlueGhost(new ImageIcon("C:\\Test1\\blueGhost.png").getImage());
        image.setOrangeGhost(new ImageIcon("C:\\Test1\\orangeGhost.png").getImage());
        image.setPinkGhost(new ImageIcon("C:\\Test1\\pinkGhost.png").getImage());
        image.setRedGhost(new ImageIcon("C:\\Test1\\redGhost.png").getImage());
        
        image.setPacManUP(new ImageIcon("C:\\Test1\\pacmanUp.png").getImage());
        image.setPacManDOWN(new ImageIcon("C:\\Test1\\pacmanDown.png").getImage());
        image.setPacManRIGHT(new ImageIcon("C:\\Test1\\pacmanRight.png").getImage());
        image.setPacManLEFT(new ImageIcon("C:\\Test1\\pacmanLeft.png").getImage());
        
        loadMap();
        for(Block ghost : ghosts){
            char Direction = directions[random.nextInt(4)];
            ghost.updateDirection(Direction);
        }
        loop = new Timer(50, this);
        loop.start();
        
    }
    
    public void loadMap(){
        walls = new HashSet<Block>();
        foods = new HashSet<Block>();
        ghosts = new HashSet<Block>();
        
        for(int r = 0; r < rowCount; r++){
            for(int c = 0; c < columnCount; c++){
                String row = tileMap[r];
                char tileMapChar = row.charAt(c);
                
                int x = c * tileSize;
                int y = r * tileSize;
                
                if(tileMapChar == 'X'){
                    Block wall = new Block(image.getWall(), x, y, tileSize, tileSize, this);
                    walls.add(wall);
                }
                else if(tileMapChar == 'b'){
                    Block ghost = new Block(image.getBlueGhost(), x, y, tileSize, tileSize, this);
                    ghosts.add(ghost);
                }
                else if(tileMapChar == 'o'){
                    Block ghost = new Block(image.getOrangeGhost(), x, y, tileSize, tileSize, this);
                    ghosts.add(ghost);
                }
                else if(tileMapChar == 'p'){
                    Block ghost = new Block(image.getPinkGhost(), x, y, tileSize, tileSize, this);
                    ghosts.add(ghost);
                }
                else if(tileMapChar == 'r'){
                    Block ghost = new Block(image.getRedGhost(), x, y, tileSize, tileSize, this);
                    ghosts.add(ghost);
                }
                else if(tileMapChar == 'P'){
                    pacman = new Block(image.getPacManRIGHT(), x, y, tileSize, tileSize, this);
                }
                else if(tileMapChar == ' '){
                    Block food = new Block(null, x + 14, y + 14 , 4, 4, this);
                    foods.add(food);
                }
            }
        }
    }
    
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        draw(g);
    }
    
    public void draw(Graphics g){
        g.drawImage(pacman.image, pacman.x, pacman.y, pacman.width, pacman.height, null);
        
        for(Block ghost : ghosts){
            g.drawImage(ghost.image, ghost.x, ghost.y, ghost.width, ghost.height, null);
        }
        
        for(Block wall : walls){
            g.drawImage(wall.image, wall.x, wall.y, wall.width, wall.height, null);
        }
        
        g.setColor(Color.WHITE);
        for(Block food : foods){
            g.fillRect(food.x, food.y, food.width, food.height);
        }
        
        g.setFont(new Font("Arial", Font.PLAIN, 18));
        if(gameOver){
            g.drawString("Game Over: " + String.valueOf(score), tileSize / 2, tileSize / 2);
        }
        else{
            g.drawString("x" + String.valueOf(lives) + "Score: " + String.valueOf(score), tileSize / 2, tileSize / 2);
        }
    }
    
    public void move(){
        pacman.x += pacman.velocityx;
        pacman.y += pacman.velocityY;
        
        for(Block wall : walls){
            if(collision(pacman, wall)){
                pacman.x -= pacman.velocityx;
                pacman.y -= pacman.velocityY;
                break;
            }
        }
        for(Block ghost : ghosts){
            if(collision(ghost, pacman)){
                lives -= 1;
                if(lives == 0){
                    gameOver = true;
                    return;
                }
                resetPosition();
            }
            if(ghost.y == tileSize*9 && ghost.direction != 'U' && ghost.direction != 'D'){     
                ghost.updateDirection('U');
            }
            ghost.x += ghost.velocityx;
            ghost.y += ghost.velocityY;
            for(Block wall : walls){
                if(collision(ghost, wall) || ghost.x <= 0 || ghost.x + ghost.width >= boardWidth){
                    ghost.x -= ghost.velocityx;
                    ghost.y -= ghost.velocityY;
                    char direction = directions[random.nextInt(4)];
                    ghost.updateDirection(direction);
                }
            }
        }
        Block foodEat = null;
        for(Block food : foods){
            if(collision(pacman, food)){
                foodEat = food;
                score += 10;
            }
        }
        foods.remove(foodEat);
        
        if(foods.isEmpty()){
            loadMap();
            resetPosition();
        }
    }
    
    public boolean collision(Block a, Block b){
        return a.x < b.x + b.width && 
                a.x + a.width > b.x &&
                a.y < b.y + b.height &&
                a.y + a.height > b.y;     
    }
    
    public void resetPosition(){
        pacman.reset();
        pacman.velocityx = 0;
        pacman.velocityY = 0;
        for(Block ghost : ghosts){
            ghost.reset();
            char direction = directions[random.nextInt(4)];
            ghost.updateDirection(direction);
        }
    }

    @Override
    //action that needs to repeat
    public void actionPerformed(ActionEvent e) {
        move();// update the location of the object and then draw
        repaint();//calls paintComponent again
        if(gameOver){
            loop.stop();
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {//press on a key that has a corresponding character
    }

    @Override
    public void keyPressed(KeyEvent e) {// press on any key
    }

    @Override
    public void keyReleased(KeyEvent e) {//press a key and then released it to do the action
        if(gameOver){
            loadMap();
            resetPosition();
            lives = 3;
            score = 0;
            gameOver = false;
            loop.start();
        }
        if(e.getKeyCode() == KeyEvent.VK_UP){
            pacman.updateDirection('U');
        }
        if(e.getKeyCode() == KeyEvent.VK_DOWN){
            pacman.updateDirection('D');
        }
        if(e.getKeyCode() == KeyEvent.VK_RIGHT){
            pacman.updateDirection('R');
        }
        if(e.getKeyCode() == KeyEvent.VK_LEFT){
            pacman.updateDirection('L');
        }
        
        if(pacman.direction == 'D'){
            pacman.image = image.getPacManDOWN();        
        }
        else if (pacman.direction == 'L'){
           pacman.image = image.getPacManLEFT();
        }
        else if(pacman.direction == 'R'){
            pacman.image = image.getPacManRIGHT();
        }
        else if(pacman.direction == 'U'){
            pacman.image = image.getPacManUP();
        }
    }
    
    public HashSet<Block> getWalls(){
        return this.walls;
    }
}
